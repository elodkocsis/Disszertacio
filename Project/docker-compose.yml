version: '3.8'
services:
  db:
    image: postgres:14.1-alpine
    restart: unless-stopped
    container_name: 'database'
    user: postgres
    environment:
      - POSTGRES_DB=DarkWebScraper
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - '5432:5432'
    volumes: 
      - postgres_data_volume:/var/lib/postgresql/data
      - ./DB/init.sql:/docker-entrypoint-initdb.d/create_tables.sql
    networks:
        - crawler
        - engine
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.10-management
    restart: unless-stopped
    container_name: 'rabbitmq'
    ports:
        - '5672:5672'
        - '15672:15672'
    volumes:
        - ./MQ/data/:/var/lib/rabbitmq/
        - ./MQ/log/:/var/log/rabbitmq
    networks:
        - crawler
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  scheduler:
    build:
      context: ./Scheduler
      dockerfile: Dockerfile_scheduler
    image: 'scheduler'
    restart: always
    container_name: 'scheduler'
    networks:
        - crawler
    depends_on:
        rabbitmq:
          condition: service_healthy
        db:
          condition: service_healthy
          
  processor:
    build:
      context: ./Scheduler
      dockerfile: Dockerfile_processor
    image: 'processor'
    restart: unless-stopped
    container_name: 'processor'
    networks:
        - crawler
    depends_on:
        rabbitmq:
          condition: service_healthy
        db:
          condition: service_healthy

  scraper:
    build:
      context: ./Scraper
      dockerfile: Dockerfile
    image: 'scraper'
    restart: unless-stopped
    networks:
        - crawler
    depends_on:
        rabbitmq:
          condition: service_healthy
    deploy:
      mode: replicated                  # in order for this to work, use `--compatibility` flag when using docker-compose
      replicas: 5

networks:
    crawler:
      name: crawler-network
      driver: bridge
    engine:
      name: engine-network
      driver: bridge   

volumes:
  postgres_data_volume:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: D:\PythonProjects\Disszertacio\Project\DB\data  # absolute path to the directory we want to mount
